# coding:utf-8
import json
import os
import pickle
import threading
import time

import numpy as np
import queue
import torch
import torch.nn.functional as F
from torch.autograd import Variable

import my_pickle
from algorithm_models.CNN_model import CNN, get_max_index
from algorithm_models.verify_model import SiameseNetwork

CURR_WORK_DIR = os.path.dirname(__file__)
CURR_DATA_DIR = os.path.join(CURR_WORK_DIR, 'models_param')

class OnlineRecognizer(threading.Thread):
    """
    在线识别线程
    主线程将数据放入该线程的队列 不断取出进行识别
    """
    def __init__(self, stop_flag):
        threading.Thread.__init__(self, name='recognize_queue')
        self.data_queue = queue.Queue()
        # 存放已经处理好的numpy对象 供模型识别
        self.stop_flag = stop_flag

        self.cnn_model = CNN()  # classify model
        self.cnn_model.load_params(CURR_DATA_DIR)
        self.cnn_model.double()
        self.cnn_model.eval()
        self.cnn_model.cpu()

        self.verify_model = VerifyModel()

        self.recognize_data_history = []
        self.skip_cnt = 0

        # 重复标记 可能有多个有效的识别挨在一起
        # 只要有一个有效识别剩下几个有效的都可以跳过
        # 直到遇到一个无效的被重新置位

    def run(self):
        while not self.stop_flag.is_set():
            time.sleep(0.01)
            while not self.data_queue.empty():
                # 转换为Variable
                new_msg = self.data_queue.get()
                if self.skip_cnt != 0:
                    self.skip_cnt -= 1
                    continue
                data_mat = np.array([new_msg.T])
                data_mat = torch.from_numpy(data_mat).double()
                data_mat = Variable(data_mat)
                # 分类并检验
                classify_output = self.cnn_model(data_mat)
                predict_index = get_max_index(classify_output)
                verify_result, diff = self.verify_model.verify_correctness(data_mat, predict_index)

                return_info = {
                    'index': predict_index,
                    'diff': diff,
                    'verify_result': str(verify_result)
                }
                # return all
                # print(json.dumps(return_info))

                if verify_result:
                    if predict_index != 62:
                        print(json.dumps(return_info))
                    self.skip_cnt = 7

                # return_info['data'] = new_msg
                # self.recognize_data_history.append(return_info)

        print("end")

    def add_new_data(self, data):
        self.data_queue.put(data)

    def clean_data_queue(self):
        self.data_queue = queue.Queue()

    def save_history_recognized_data(self):
        # 保存历史数据
        time_tag = time.strftime("%m-%d %H_%M", time.localtime(time.time()))
        file_name = os.path.join(CURR_DATA_DIR, 'history_recognized_data_' + time_tag)
        file_ = open(file_name, 'wb')
        pickle.dump(self.recognize_data_history, file_)
        file_.close()

    def stop_thread(self):
        #  将识别时输入算法的数据保存起来
        # self.save_history_recognized_data()
        self.recognize_data_history = []
        self.stop_flag.set()

class VerifyModel:
    """
    验证模型
    """

    def __init__(self):
        self.verify_model = SiameseNetwork(train=False)  # verify model
        load_model_param(self.verify_model, 'verify_model')
        self.verify_model.double()
        self.verify_model.eval()
        self.verify_model.cpu()
        self.threshold = 0.7

        vector_file_path = os.path.join(CURR_DATA_DIR, 'reference_verify_vector')
        file_ = open(vector_file_path, 'rb')
        self.reference_vectors = pickle.load(file_)  # reference vector
        file_.close()

    def verify_correctness(self, data, predict_index):
        """
        :return: 验证的正误以及 差异程度
        """
        data_vector = self.verify_model(data)
        reference_vector = np.array([self.reference_vectors[predict_index]])
        reference_vector = Variable(torch.from_numpy(reference_vector).double())
        diff = F.pairwise_distance(data_vector, reference_vector)
        diff = torch.squeeze(diff).item()
        if diff > self.threshold:
            return False, diff
        else:
            return True, diff


'''
0.42653824340594926,0.5808361613288098,0.17822895232401142,0.5751087730670692,0.45078783576381276,0.5210574607782251,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4248489663899464,0.5805723412265604,0.17608057201797234,0.5738909952582977,0.4496251467984034,0.5208739773073735,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42448321238948516,0.5802292854041566,0.17537663633225833,0.5739833404073751,0.4481029863993061,0.5210741189166994,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4249809587545457,0.5798997902877584,0.1755662889254546,0.574971712537346,0.44642389192194193,0.5214978161297461,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42588218283510826,0.5796766523035259,0.17609867345614608,0.5764420156712553,0.44479040072173187,0.5219849994700563,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42672686198115295,0.5796526678776193,0.1764229335829179,0.5779801538321477,0.44340505015409687,0.5223755994611731,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42705497354266,0.5799206334361983,0.17598821296435516,0.5791720310430681,0.44247037757445795,0.5225095466266395,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42640649486960946,0.5805733454054232,0.17424365525904284,0.5796035513270612,0.44218892033823615,0.5222267714899985,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.424874115533307,0.5791019723272295,0.17464814942010914,0.5775489428410824,0.4391064169636112,0.5219829035118083,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4285898550213424,0.57923980783061,0.17084719592833586,0.5797414873812956,0.44096661259995473,0.5212214586650598,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.43001647228698653,0.5800230176861184,0.16718839475027714,0.5800863965171268,0.4430781731753275,0.5209523513525213,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4297842196175891,0.5810398370638016,0.1641104500901481,0.5790483442106619,0.44516214822265593,0.5210900704604946,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42852334930049996,0.5818785011337062,0.16205206615216394,0.5770920044239871,0.44693958727486655,0.5215491048752816,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42686411362306886,0.5821272450658792,0.16145194714053984,0.5746820511191889,0.4481315398648858,0.522243943483184,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42543676487264553,0.5813743040303674,0.16274879725949096,0.5722831582583533,0.44845905552564014,0.5230890751705036,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4248715553365798,0.5792079131972173,0.16638132071323247,0.5703599998035664,0.447643183790056,0.5239989888235421,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4211819461103786,0.5770786634948377,0.17227330242578212,0.5716937667559189,0.4459860276930192,0.5270966558012857,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4252627835847479,0.5772762277163497,0.17600498844799423,0.5742433150741525,0.4440070201452074,0.5283979923241967,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42693660921286314,0.5771111484971221,0.17719361123436145,0.5771172762336122,0.44201762767443403,0.5289017111179464,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42683322513759475,0.5767978909774517,0.17633258192771223,0.5800566109638396,0.44015946890330904,0.5288921057687377,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4255824335018129,0.5765509202976351,0.17391531167087498,0.5828022799943766,0.43857416245444214,0.528653469862774,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42381403644838794,0.5765847015979688,0.1704352116066782,0.5850952440547648,0.43740332695044315,0.528470096986258,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4221578361201901,0.5771137000187495,0.16638569287795044,0.5866764638745459,0.43678858101392193,0.5286262807253931,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42124363466008957,0.578352380700274,0.16226016662752005,0.5872869001832616,0.4368715432674883,0.5294063146663822,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4233937528924129,0.5804644477865626,0.15795188961393217,0.5875327837649597,0.4389591235247507,0.5320974379326074,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4229266185848176,0.5808549896824807,0.1546758757484553,0.5845805508215948,0.44108534657838655,0.5326853940493453,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4220551294945004,0.5793865046913574,0.15632832617025447,0.5801813252823865,0.44291644229561095,0.5323328473999585,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42105154800747735,0.5768028404512282,0.16132134139913254,0.5753949444689367,0.44425364361985425,0.5312668783825605,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4201881365097645,0.5738478446001283,0.1680670219548924,0.5712812457028467,0.4448981834945469,0.5297145673952653,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.41973715738737793,0.5712653647760932,0.17497746835733685,0.5689000663057181,0.4446512948631193,0.5279029948361871,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.41997087302633374,0.5697992486171584,0.1804647811262687,0.5693112435991526,0.4433142106690017,0.5260592411034393,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.421161545812648,0.5701933437613591,0.1829410607814909,0.5735746149047519,0.4406881638556246,0.5244103865951361,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42371784128763434,0.571752191976014,0.18660025365973207,0.5763217238119995,0.4368143044496519,0.5210178840084101,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4215285886196249,0.5732721720929538,0.18100829347940456,0.5805583675907399,0.43513240161612277,0.5194666974561303,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42009632891797044,0.574177847323424,0.1758656992389325,0.5833057229657891,0.43340192021578816,0.5183598611645939,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.41945127187885045,0.5746773487564352,0.17125435656368437,0.584818529176765,0.43194188950899126,0.5175911135355955,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4196236271984447,0.5749788074809978,0.1672561510790286,0.5853515254632854,0.43107133875607523,0.5170541929709298,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42064360457293276,0.5752903545861223,0.16395296841033366,0.5851594510649679,0.43110929721738317,0.5166428378723915,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4225414136984942,0.5758201211608192,0.16142669418296793,0.5844970452214305,0.43237479415325814,0.5162507866417753,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42534726427130864,0.5767762382940989,0.15975921402229992,0.5836190471722909,0.43518685882404334,0.5157717776808756,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42657201361992153,0.5802054533216243,0.15407740832790548,0.5801355335516133,0.4389894634553194,0.5145343159656431,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42715183141611957,0.5780348051501896,0.15815849507424973,0.5778228289775151,0.4399025508895772,0.5147776060795386,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42731140361495434,0.5772269147484458,0.16083421982722657,0.5766421966586835,0.4411538824585103,0.5150039080499964,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4271654420346177,0.5773394799497509,0.16257731112773932,0.5762423571526093,0.44256023713231984,0.5152045791608207,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42682865849330176,0.5779301985874632,0.16386049751669127,0.5762720310167836,0.4439383938812071,0.5153709766958157,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42641576480919835,0.5785567684949409,0.16515650753498573,0.5763799388086975,0.4451051316753732,0.5154944579387853,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4260414728004995,0.5787768875055421,0.166938069723526,0.576214801085842,0.44587722948501934,0.5155663801735338,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42582049428539714,0.578148253452625,0.1696779126232154,0.575425338405708,0.4460714662803468,0.5155781006838656,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4257693716269409,0.5764180811664944,0.16729028465481147,0.5771585928823394,0.44777520235377544,0.516072923567956,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4253187189486164,0.5781800404954255,0.16752018665253385,0.5773038899471603,0.44763491689334506,0.5165175785854382,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.425300122801379,0.5790634843216356,0.16679162899506625,0.5771399531507502,0.4479311984687518,0.516863930529586,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.425491011748144,0.579318272944641,0.1655959254346194,0.5767873337073718,0.4485377678924386,0.5171523253520418,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4256688143518265,0.5791942666639583,0.16442438972340404,0.5763665828312879,0.4493283459768486,0.5174231090044481,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4256109591753416,0.5789413257791038,0.16376833561363077,0.5759982517367616,0.45017665353442504,0.5177166274384474,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42509487478160435,0.5788093105895941,0.16411907685751037,0.5758028916380554,0.4509564113776109,0.5180732266056819,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42389798973353,0.5790480813949452,0.16596792720725353,0.5759010537494323,0.4515413403188493,0.5185332524577941,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4234208991053292,0.5793656529601924,0.16542189559252016,0.5731548243939476,0.4503579151708995,0.5189975271238099,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4242019506864544,0.578014928784452,0.16893266011096456,0.5741564732987121,0.44939361374200665,0.5199458116772337,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42498468137793965,0.577784573954329,0.17066933179401358,0.57505091891212,0.44787636035735134,0.5211562666823982,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4257192251746673,0.5781946081390267,0.17121853914528512,0.575848640679961,0.44586358751450555,0.5223900823406378,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4263557160715197,0.5787650510077482,0.17116691066839698,0.5765601180480247,0.4434127277110412,0.5234084488532871,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.42684428806337904,0.5790159222296969,0.17110107486696713,0.5771958304621005,0.44058121344453005,0.5239725564216807,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4271350751451277,0.5784672414740761,0.17160766024461335,0.5777662573679784,0.43742647721254413,0.5238435952471534,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;0.4271782113116481,0.5766390284100891,0.17327329530495356,0.5782818782114477,0.43400595151265525,0.5227827555310395,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,;
'''


def load_model_param(model, model_name):
    for root, dirs, files in os.walk(CURR_DATA_DIR):
        for file_ in files:
            file_name_split = os.path.splitext(file_)
            if file_name_split[1] == '.pkl' and file_name_split[0].startswith(model_name):
                file_ = CURR_DATA_DIR + '\\' + file_
                model.load_state_dict(torch.load(file_))
                model.eval()
                return model

# 取最大值 并将识别结果返回处理为一个json 用于处理rnn输出
def generate_offline_recognize_result(tensor):
    prob_each_sign = torch.squeeze(tensor).data.numpy()
    max_res = torch.max(tensor, dim=1)
    max_value = max_res[0].data.float()[0][0]
    raw_index = max_res[1].data.int()[0][0]
    if max_value < 0.15:
        index = 13
    else:
        index = raw_index

    return_info = {
        'type': 'offline',
        'each_prob': str(prob_each_sign),
        'max_prob': max_value,
        'index': index,
        'raw_index': raw_index,
    }
    return return_info


def main():
    # load model
    stop_event = threading.Event()
    online_recognizer = OnlineRecognizer(stop_event)
    online_recognizer.start()

    while True:
        read_ = input()
        if read_ == 'end':
            if online_recognizer is not None:
                online_recognizer.stop_thread()
            print("end")
            return
        data_mat = my_pickle.loads(read_)
        online_recognizer.add_new_data(data_mat)


if __name__ == '__main__':
    main()
