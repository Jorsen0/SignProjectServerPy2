data_set_size:10728
input_size:64
batch_size:64
accuracy of each sign:
sign 0, accuracy 1.000000 (16 / 16)
sign 1, accuracy 1.000000 (9 / 9)
sign 2, accuracy 0.944444 (17 / 18)
sign 3, accuracy 0.882353 (15 / 17)
sign 4, accuracy 0.923077 (12 / 13)
sign 5, accuracy 1.000000 (11 / 11)
sign 6, accuracy 0.857143 (12 / 14)
sign 7, accuracy 0.863636 (19 / 22)
sign 8, accuracy 1.000000 (13 / 13)
sign 9, accuracy 0.933333 (14 / 15)
sign 10, accuracy 0.937500 (15 / 16)
sign 11, accuracy 0.933333 (14 / 15)
sign 12, accuracy 1.000000 (13 / 13)
sign 13, accuracy 1.000000 (11 / 11)
sign 14, accuracy 1.000000 (8 / 8)
sign 15, accuracy 1.000000 (12 / 12)
sign 16, accuracy 0.909091 (10 / 11)
sign 17, accuracy 1.000000 (9 / 9)
sign 18, accuracy 1.000000 (17 / 17)
sign 19, accuracy 1.000000 (6 / 6)
sign 20, accuracy 1.000000 (9 / 9)
sign 21, accuracy 1.000000 (9 / 9)
sign 22, accuracy 1.000000 (7 / 7)
sign 23, accuracy 1.000000 (9 / 9)
overall accuracy: 0.95667
loss: 2.247203
Epoch: 1200
learning rate 0.000046
weight_decay 0.000000
CNN(
  (conv1): Sequential(
    (0): Conv1d(14, 32, kernel_size=(3,), stride=(1,), padding=(1,))
    (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
    (2): LeakyReLU(0.01)
    (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
    (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
    (5): LeakyReLU(0.01)
    (6): MaxPool1d(kernel_size=3, stride=3, padding=0, dilation=1, ceil_mode=False)
  )
  (conv2): Sequential(
    (0): Conv1d(32, 64, kernel_size=(3,), stride=(1,), padding=(1,))
    (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True)
    (2): LeakyReLU(0.01)
    (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
    (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True)
    (5): LeakyReLU(0.01)
    (6): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
    (7): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True)
    (8): LeakyReLU(0.01)
    (9): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (out1): Sequential(
    (0): LeakyReLU(0.01)
    (1): Dropout(p=0.5)
    (2): Linear(in_features=640, out_features=512, bias=True)
    (3): LeakyReLU(0.01)
    (4): Dropout(p=0.5)
    (5): Linear(in_features=512, out_features=512, bias=True)
    (6): LeakyReLU(0.01)
    (7): Dropout(p=0.5)
    (8): Linear(in_features=512, out_features=256, bias=True)
    (9): LeakyReLU(0.01)
    (10): Dropout(p=0.5)
    (11): Linear(in_features=256, out_features=24, bias=True)
    (12): Softmax()
  )
)